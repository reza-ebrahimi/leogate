/* automatically generated by rust-bindgen 0.56.0 */

pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const ROS_VERSION_MAJOR: u32 = 1;
pub const ROS_VERSION_MINOR: u32 = 14;
pub const ROS_VERSION_PATCH: u32 = 6;
pub const _INTTYPES_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 27;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &'static [u8; 2usize] = b"l\0";
pub const __PRIPTR_PREFIX: &'static [u8; 2usize] = b"l\0";
pub const PRId8: &'static [u8; 2usize] = b"d\0";
pub const PRId16: &'static [u8; 2usize] = b"d\0";
pub const PRId32: &'static [u8; 2usize] = b"d\0";
pub const PRId64: &'static [u8; 3usize] = b"ld\0";
pub const PRIdLEAST8: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST16: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST64: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST8: &'static [u8; 2usize] = b"d\0";
pub const PRIdFAST16: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST32: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST64: &'static [u8; 3usize] = b"ld\0";
pub const PRIi8: &'static [u8; 2usize] = b"i\0";
pub const PRIi16: &'static [u8; 2usize] = b"i\0";
pub const PRIi32: &'static [u8; 2usize] = b"i\0";
pub const PRIi64: &'static [u8; 3usize] = b"li\0";
pub const PRIiLEAST8: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST16: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST64: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST8: &'static [u8; 2usize] = b"i\0";
pub const PRIiFAST16: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST32: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST64: &'static [u8; 3usize] = b"li\0";
pub const PRIo8: &'static [u8; 2usize] = b"o\0";
pub const PRIo16: &'static [u8; 2usize] = b"o\0";
pub const PRIo32: &'static [u8; 2usize] = b"o\0";
pub const PRIo64: &'static [u8; 3usize] = b"lo\0";
pub const PRIoLEAST8: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST16: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST64: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST8: &'static [u8; 2usize] = b"o\0";
pub const PRIoFAST16: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST32: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST64: &'static [u8; 3usize] = b"lo\0";
pub const PRIu8: &'static [u8; 2usize] = b"u\0";
pub const PRIu16: &'static [u8; 2usize] = b"u\0";
pub const PRIu32: &'static [u8; 2usize] = b"u\0";
pub const PRIu64: &'static [u8; 3usize] = b"lu\0";
pub const PRIuLEAST8: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST16: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST64: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST8: &'static [u8; 2usize] = b"u\0";
pub const PRIuFAST16: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST32: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST64: &'static [u8; 3usize] = b"lu\0";
pub const PRIx8: &'static [u8; 2usize] = b"x\0";
pub const PRIx16: &'static [u8; 2usize] = b"x\0";
pub const PRIx32: &'static [u8; 2usize] = b"x\0";
pub const PRIx64: &'static [u8; 3usize] = b"lx\0";
pub const PRIxLEAST8: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST16: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST64: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST8: &'static [u8; 2usize] = b"x\0";
pub const PRIxFAST16: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST32: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST64: &'static [u8; 3usize] = b"lx\0";
pub const PRIX8: &'static [u8; 2usize] = b"X\0";
pub const PRIX16: &'static [u8; 2usize] = b"X\0";
pub const PRIX32: &'static [u8; 2usize] = b"X\0";
pub const PRIX64: &'static [u8; 3usize] = b"lX\0";
pub const PRIXLEAST8: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST16: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST32: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST64: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST8: &'static [u8; 2usize] = b"X\0";
pub const PRIXFAST16: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST32: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST64: &'static [u8; 3usize] = b"lX\0";
pub const PRIdMAX: &'static [u8; 3usize] = b"ld\0";
pub const PRIiMAX: &'static [u8; 3usize] = b"li\0";
pub const PRIoMAX: &'static [u8; 3usize] = b"lo\0";
pub const PRIuMAX: &'static [u8; 3usize] = b"lu\0";
pub const PRIxMAX: &'static [u8; 3usize] = b"lx\0";
pub const PRIXMAX: &'static [u8; 3usize] = b"lX\0";
pub const PRIdPTR: &'static [u8; 3usize] = b"ld\0";
pub const PRIiPTR: &'static [u8; 3usize] = b"li\0";
pub const PRIoPTR: &'static [u8; 3usize] = b"lo\0";
pub const PRIuPTR: &'static [u8; 3usize] = b"lu\0";
pub const PRIxPTR: &'static [u8; 3usize] = b"lx\0";
pub const PRIXPTR: &'static [u8; 3usize] = b"lX\0";
pub const SCNd8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNd16: &'static [u8; 3usize] = b"hd\0";
pub const SCNd32: &'static [u8; 2usize] = b"d\0";
pub const SCNd64: &'static [u8; 3usize] = b"ld\0";
pub const SCNdLEAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdLEAST16: &'static [u8; 3usize] = b"hd\0";
pub const SCNdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const SCNdLEAST64: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdFAST16: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST32: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST64: &'static [u8; 3usize] = b"ld\0";
pub const SCNi8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNi16: &'static [u8; 3usize] = b"hi\0";
pub const SCNi32: &'static [u8; 2usize] = b"i\0";
pub const SCNi64: &'static [u8; 3usize] = b"li\0";
pub const SCNiLEAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiLEAST16: &'static [u8; 3usize] = b"hi\0";
pub const SCNiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const SCNiLEAST64: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiFAST16: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST32: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST64: &'static [u8; 3usize] = b"li\0";
pub const SCNu8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNu16: &'static [u8; 3usize] = b"hu\0";
pub const SCNu32: &'static [u8; 2usize] = b"u\0";
pub const SCNu64: &'static [u8; 3usize] = b"lu\0";
pub const SCNuLEAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuLEAST16: &'static [u8; 3usize] = b"hu\0";
pub const SCNuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const SCNuLEAST64: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuFAST16: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST32: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST64: &'static [u8; 3usize] = b"lu\0";
pub const SCNo8: &'static [u8; 4usize] = b"hho\0";
pub const SCNo16: &'static [u8; 3usize] = b"ho\0";
pub const SCNo32: &'static [u8; 2usize] = b"o\0";
pub const SCNo64: &'static [u8; 3usize] = b"lo\0";
pub const SCNoLEAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoLEAST16: &'static [u8; 3usize] = b"ho\0";
pub const SCNoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const SCNoLEAST64: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoFAST16: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST32: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST64: &'static [u8; 3usize] = b"lo\0";
pub const SCNx8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNx16: &'static [u8; 3usize] = b"hx\0";
pub const SCNx32: &'static [u8; 2usize] = b"x\0";
pub const SCNx64: &'static [u8; 3usize] = b"lx\0";
pub const SCNxLEAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxLEAST16: &'static [u8; 3usize] = b"hx\0";
pub const SCNxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const SCNxLEAST64: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxFAST16: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST32: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST64: &'static [u8; 3usize] = b"lx\0";
pub const SCNdMAX: &'static [u8; 3usize] = b"ld\0";
pub const SCNiMAX: &'static [u8; 3usize] = b"li\0";
pub const SCNoMAX: &'static [u8; 3usize] = b"lo\0";
pub const SCNuMAX: &'static [u8; 3usize] = b"lu\0";
pub const SCNxMAX: &'static [u8; 3usize] = b"lx\0";
pub const SCNdPTR: &'static [u8; 3usize] = b"ld\0";
pub const SCNiPTR: &'static [u8; 3usize] = b"li\0";
pub const SCNoPTR: &'static [u8; 3usize] = b"lo\0";
pub const SCNuPTR: &'static [u8; 3usize] = b"lu\0";
pub const SCNxPTR: &'static [u8; 3usize] = b"lx\0";
#[repr(C)]
#[derive(Copy, Clone)]
pub struct callback_queue {
  _unused: [u8; 0],
}
pub const CallOneResult_Called: CallOneResult = 0;
pub const CallOneResult_TryAgain: CallOneResult = 1;
pub const CallOneResult_Disabled: CallOneResult = 2;
pub const CallOneResult_Empty: CallOneResult = 3;
pub type CallOneResult = ::std::os::raw::c_uint;
extern "C" {
  pub fn callback_queue_create(enabled: bool) -> *mut callback_queue;
}
extern "C" {
  pub fn callback_queue_destroy(cq: *mut callback_queue);
}
extern "C" {
  #[doc = " \\brief Pop a single callback off the front of the queue and invoke it.  If the callback was not ready to be called,"]
  #[doc = " pushes it back onto the queue."]
  pub fn callback_queue_callOne(cq: *mut callback_queue) -> CallOneResult;
}
extern "C" {
  #[doc = " \\brief Invoke all callbacks currently in the queue.  If a callback was not ready to be called, pushes it back onto the queue."]
  pub fn callback_queue_callAvailable(cq: *mut callback_queue);
}
extern "C" {
  #[doc = " \\brief returns whether or not the queue is empty"]
  pub fn callback_queue_empty(cq: *mut callback_queue) -> bool;
}
extern "C" {
  #[doc = " \\brief returns whether or not the queue is empty"]
  pub fn callback_queue_isEmpty(cq: *mut callback_queue) -> bool;
}
extern "C" {
  #[doc = " \\brief Removes all callbacks from the queue.  Does \\b not wait for calls currently in progress to finish."]
  pub fn callback_queue_clear(cq: *mut callback_queue);
}
extern "C" {
  #[doc = " \\brief Enable the queue (queue is enabled by default)"]
  pub fn callback_queue_enable(cq: *mut callback_queue);
}
extern "C" {
  #[doc = " \\brief Disable the queue, meaning any calls to addCallback() will have no effect"]
  pub fn callback_queue_disable(cq: *mut callback_queue);
}
extern "C" {
  #[doc = " \\brief Returns whether or not this queue is enabled"]
  pub fn callback_queue_isEnabled(cq: *mut callback_queue) -> bool;
}
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct max_align_t {
  pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
  pub __bindgen_padding_0: u64,
  pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
  assert_eq!(
    ::std::mem::size_of::<max_align_t>(),
    32usize,
    concat!("Size of: ", stringify!(max_align_t))
  );
  assert_eq!(
    ::std::mem::align_of::<max_align_t>(),
    16usize,
    concat!("Alignment of ", stringify!(max_align_t))
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
    },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(max_align_t),
      "::",
      stringify!(__clang_max_align_nonce1)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
    },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(max_align_t),
      "::",
      stringify!(__clang_max_align_nonce2)
    )
  );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _binary_payload {
  pub payload: *const ::std::os::raw::c_uchar,
  pub size: usize,
}
#[test]
fn bindgen_test_layout__binary_payload() {
  assert_eq!(
    ::std::mem::size_of::<_binary_payload>(),
    16usize,
    concat!("Size of: ", stringify!(_binary_payload))
  );
  assert_eq!(
    ::std::mem::align_of::<_binary_payload>(),
    8usize,
    concat!("Alignment of ", stringify!(_binary_payload))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_binary_payload>())).payload as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_binary_payload),
      "::",
      stringify!(payload)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_binary_payload>())).size as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_binary_payload),
      "::",
      stringify!(size)
    )
  );
}
pub type binary_payload = _binary_payload;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _json_payload {
  pub payload: *const ::std::os::raw::c_char,
  pub size: usize,
}
#[test]
fn bindgen_test_layout__json_payload() {
  assert_eq!(
    ::std::mem::size_of::<_json_payload>(),
    16usize,
    concat!("Size of: ", stringify!(_json_payload))
  );
  assert_eq!(
    ::std::mem::align_of::<_json_payload>(),
    8usize,
    concat!("Alignment of ", stringify!(_json_payload))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_json_payload>())).payload as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_json_payload),
      "::",
      stringify!(payload)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_json_payload>())).size as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_json_payload),
      "::",
      stringify!(size)
    )
  );
}
pub type json_payload = _json_payload;
pub type callback = ::std::option::Option<
  unsafe extern "C" fn(
    topic: *const ::std::os::raw::c_char,
    payload: *const json_payload,
    bin_payload: *const binary_payload,
  ),
>;
extern "C" {
  pub fn ros_disableAllSignalsInThisThread();
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __fsid_t {
  pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
  assert_eq!(
    ::std::mem::size_of::<__fsid_t>(),
    8usize,
    concat!("Size of: ", stringify!(__fsid_t))
  );
  assert_eq!(
    ::std::mem::align_of::<__fsid_t>(),
    4usize,
    concat!("Alignment of ", stringify!(__fsid_t))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(__fsid_t),
      "::",
      stringify!(__val)
    )
  );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct imaxdiv_t {
  pub quot: ::std::os::raw::c_long,
  pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
  assert_eq!(
    ::std::mem::size_of::<imaxdiv_t>(),
    16usize,
    concat!("Size of: ", stringify!(imaxdiv_t))
  );
  assert_eq!(
    ::std::mem::align_of::<imaxdiv_t>(),
    8usize,
    concat!("Alignment of ", stringify!(imaxdiv_t))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).quot as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(imaxdiv_t),
      "::",
      stringify!(quot)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).rem as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(imaxdiv_t),
      "::",
      stringify!(rem)
    )
  );
}
extern "C" {
  pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
extern "C" {
  pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
  pub fn strtoimax(
    __nptr: *const ::std::os::raw::c_char,
    __endptr: *mut *mut ::std::os::raw::c_char,
    __base: ::std::os::raw::c_int,
  ) -> intmax_t;
}
extern "C" {
  pub fn strtoumax(
    __nptr: *const ::std::os::raw::c_char,
    __endptr: *mut *mut ::std::os::raw::c_char,
    __base: ::std::os::raw::c_int,
  ) -> uintmax_t;
}
extern "C" {
  pub fn wcstoimax(
    __nptr: *const __gwchar_t,
    __endptr: *mut *mut __gwchar_t,
    __base: ::std::os::raw::c_int,
  ) -> intmax_t;
}
extern "C" {
  pub fn wcstoumax(
    __nptr: *const __gwchar_t,
    __endptr: *mut *mut __gwchar_t,
    __base: ::std::os::raw::c_int,
  ) -> uintmax_t;
}
#[doc = " Don't install a SIGINT handler.  You should install your own SIGINT handler in this"]
#[doc = " case, to ensure that the node gets shutdown correctly when it exits."]
pub const InitOption_NoSigintHandler: InitOption = 1;
#[doc = " \\brief Anonymize the node name.  Adds a random number to the end of your node's name, to make it unique."]
pub const InitOption_AnonymousName: InitOption = 2;
#[doc = " \\brief Don't broadcast rosconsole output to the /rosout topic"]
pub const InitOption_NoRosout: InitOption = 4;
pub type InitOption = ::std::os::raw::c_uint;
extern "C" {
  #[doc = " @brief ROS initialization function."]
  #[doc = ""]
  #[doc = " This function will parse any ROS arguments (e.g., topic name"]
  #[doc = " remappings), and will consume them (i.e., argc and argv may be modified"]
  #[doc = " as a result of this call)."]
  #[doc = ""]
  #[doc = " Use this version if you are using the NodeHandle API"]
  #[doc = ""]
  #[doc = " \\param argc"]
  #[doc = " \\param argv"]
  #[doc = " \\param name Name of this node.  The name must be a base name, ie. it cannot contain namespaces."]
  #[doc = " \\param options [optional] Options to start the node with (a set of bit flags from \\ref ros::init_options)"]
  #[doc = " \\throws InvalidNodeNameException If the name passed in is not a valid \"base\" name"]
  #[doc = ""]
  pub fn ros_init(name: *const ::std::os::raw::c_uchar, options: u32);
}
extern "C" {
  #[doc = " \\brief Returns whether or not ros::init() has been called"]
  pub fn ros_isInitialized() -> bool;
}
extern "C" {
  #[doc = " \\brief Returns whether or not ros::shutdown() has been (or is being) called"]
  pub fn ros_isShuttingDown() -> bool;
}
extern "C" {
  #[doc = " \\brief Enter simple event loop"]
  #[doc = ""]
  #[doc = " This method enters a loop, processing callbacks.  This method should only be used"]
  #[doc = " if the NodeHandle API is being used."]
  #[doc = ""]
  #[doc = " This method is mostly useful when your node does all of its work in"]
  #[doc = " subscription callbacks.  It will not process any callbacks that have been assigned to"]
  #[doc = " custom queues."]
  #[doc = ""]
  pub fn ros_spin();
}
extern "C" {
  #[doc = " \\brief Process a single round of callbacks."]
  #[doc = ""]
  #[doc = " This method is useful if you have your own loop running and would like to process"]
  #[doc = " any callbacks that are available.  This is equivalent to calling callAvailable() on the"]
  #[doc = " global CallbackQueue.  It will not process any callbacks that have been assigned to"]
  #[doc = " custom queues."]
  pub fn ros_spinOnce();
}
extern "C" {
  #[doc = " \\brief Wait for this node to be shutdown, whether through Ctrl-C, ros::shutdown(), or similar."]
  pub fn ros_waitForShutdown();
}
extern "C" {
  #[doc = " \\brief Check whether it's time to exit."]
  #[doc = ""]
  #[doc = " ok() becomes false once ros::shutdown() has been called and is finished"]
  #[doc = ""]
  #[doc = " \\return true if we're still OK, false if it's time to exit"]
  pub fn ros_ok() -> bool;
}
extern "C" {
  #[doc = " \\brief Disconnects everything and unregisters from the master.  It is generally not"]
  #[doc = " necessary to call this function, as the node will automatically shutdown when all"]
  #[doc = " NodeHandles destruct.  However, if you want to break out of a spin() loop explicitly,"]
  #[doc = " this function allows that."]
  pub fn ros_shutdown();
}
extern "C" {
  #[doc = " \\brief Request that the node shut itself down from within a ROS thread"]
  #[doc = ""]
  #[doc = " This method signals a ROS thread to call shutdown()."]
  pub fn ros_requestShutdown();
}
extern "C" {
  #[doc = " \\brief Actually starts the internals of the node (spins up threads, starts the network polling and xmlrpc loops,"]
  #[doc = " connects to internal subscriptions like /clock, starts internal service servers, etc.)."]
  #[doc = ""]
  #[doc = " Usually unnecessary to call manually, as it is automatically called by the creation of the first NodeHandle if"]
  #[doc = " the node has not already been started.  If you would like to prevent the automatic shutdown caused by the last"]
  #[doc = " NodeHandle going out of scope, call this before any NodeHandle has been created (e.g. immediately after init())"]
  pub fn ros_start();
}
extern "C" {
  #[doc = " \\brief Returns whether or not the node has been started through ros::start()"]
  pub fn ros_isStarted() -> bool;
}
extern "C" {
  #[doc = " \\brief Returns a pointer to the global default callback queue."]
  #[doc = ""]
  #[doc = " This is the queue that all callbacks get added to unless a different one is specified, either in the NodeHandle"]
  #[doc = " or in the individual NodeHandle::subscribe()/NodeHandle::advertise()/etc. functions."]
  pub fn ros_getGlobalCallbackQueue() -> *mut callback_queue;
}
extern "C" {
  #[doc = " \\brief searches the command line arguments for the given arg parameter. In case this argument is not found"]
  #[doc = " an empty string is returned."]
  #[doc = ""]
  #[doc = " \\param argc the number of command-line arguments"]
  #[doc = " \\param argv the command-line arguments"]
  #[doc = " \\param arg argument to search for"]
  pub fn ros_getROSArg(
    argc: ::std::os::raw::c_int,
    argv: *const *const ::std::os::raw::c_char,
    arg: *const ::std::os::raw::c_char,
  ) -> *const ::std::os::raw::c_char;
}
extern "C" {
  #[doc = " \\brief returns the default master uri that is used if no other is specified, e.g. by defining ROS_MASTER_URI."]
  pub fn ros_getDefaultMasterURI() -> *const ::std::os::raw::c_char;
}
extern "C" {
  #[doc = " @brief Get the hostname where the master runs."]
  #[doc = ""]
  #[doc = " @return The master's hostname, as a string"]
  pub fn ros_master_getHost() -> *const ::std::os::raw::c_char;
}
extern "C" {
  #[doc = " @brief Get the port where the master runs."]
  #[doc = ""]
  #[doc = " @return The master's port."]
  pub fn ros_master_getPort() -> u32;
}
extern "C" {
  #[doc = " \\brief Get the full URI to the master (eg. http://host:port/)"]
  pub fn ros_master_getURI() -> *const ::std::os::raw::c_char;
}
extern "C" {
  #[doc = " @brief Check whether the master is up"]
  #[doc = ""]
  #[doc = " This method tries to contact the master.  You can call it any time"]
  #[doc = " after ros::init has been called.  The intended usage is to check"]
  #[doc = " whether the master is up before trying to make other requests"]
  #[doc = " (subscriptions, advertisements, etc.)."]
  #[doc = ""]
  #[doc = " @returns true if the master is available, false otherwise."]
  pub fn ros_master_check() -> bool;
}
extern "C" {
  #[doc = " @brief Get the list of topics that are being published by all nodes."]
  #[doc = ""]
  #[doc = " This method communicates with the master to retrieve the list of all"]
  #[doc = " currently advertised topics."]
  #[doc = ""]
  #[doc = " @param topics A place to store the resulting list.  Each item in the"]
  #[doc = " list is a pair <string topic, string type>.  The type is represented"]
  #[doc = " in the format \"package_name/MessageName\", and is also retrievable"]
  #[doc = " through message.__getDataType() or MessageName::__s_getDataType()."]
  #[doc = ""]
  #[doc = " @return true on success, false otherwise (topics not filled in)"]
  pub fn ros_master_getTopics() -> *const ::std::os::raw::c_char;
}
extern "C" {
  #[doc = " \\brief Retreives the currently-known list of nodes from the master"]
  pub fn ros_master_getNodes() -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct subscriber {
  _unused: [u8; 0],
}
extern "C" {
  pub fn subscriber_create() -> *mut subscriber;
}
extern "C" {
  pub fn subscriber_destroy(sub: *mut subscriber);
}
extern "C" {
  #[doc = " \\brief Unsubscribe the callback associated with this Subscriber"]
  #[doc = ""]
  #[doc = " This method usually does not need to be explicitly called, as automatic shutdown happens when"]
  #[doc = " all copies of this Subscriber go out of scope"]
  #[doc = ""]
  #[doc = " This method overrides the automatic reference counted unsubscribe, and immediately"]
  #[doc = " unsubscribes the callback associated with this Subscriber"]
  pub fn subscriber_shutdown(sub: *mut subscriber);
}
extern "C" {
  pub fn subscriber_getTopic(sub: *mut subscriber) -> *const ::std::os::raw::c_char;
}
extern "C" {
  #[doc = " \\brief Returns the number of publishers this subscriber is connected to"]
  pub fn subscriber_getNumPublishers(sub: *mut subscriber) -> u32;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct publisher {
  _unused: [u8; 0],
}
extern "C" {
  pub fn publisher_create() -> *mut publisher;
}
extern "C" {
  pub fn publisher_destroy(pub_: *mut publisher);
}
extern "C" {
  #[doc = " \\brief Shutdown the advertisement associated with this Publisher"]
  #[doc = ""]
  #[doc = " This method usually does not need to be explicitly called, as automatic shutdown happens when"]
  #[doc = " all copies of this Publisher go out of scope"]
  #[doc = ""]
  #[doc = " This method overrides the automatic reference counted unadvertise, and does so immediately."]
  #[doc = " \\note Note that if multiple advertisements were made through NodeHandle::advertise(), this will"]
  #[doc = " only remove the one associated with this Publisher"]
  pub fn publisher_shutdown(pub_: *mut publisher);
}
extern "C" {
  #[doc = " \\brief Returns the topic that this Publisher will publish on."]
  pub fn publisher_getTopic(pub_: *mut publisher) -> *const ::std::os::raw::c_char;
}
extern "C" {
  #[doc = " \\brief Returns the number of subscribers that are currently connected to this Publisher"]
  pub fn publisher_getNumSubscribers(pub_: *mut publisher) -> u32;
}
extern "C" {
  #[doc = " \\brief Returns whether or not this topic is latched"]
  pub fn publisher_isLatched() -> bool;
}
extern "C" {
  pub fn publisher_publish(pub_: *mut publisher, message: *const ::std::os::raw::c_char);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct node_handle {
  _unused: [u8; 0],
}
extern "C" {
  pub fn node_handle_create(nh: *const ::std::os::raw::c_char) -> *mut node_handle;
}
extern "C" {
  pub fn node_handle_destroy(nh: *mut node_handle);
}
extern "C" {
  #[doc = " \\brief Set the default callback queue to be used by this NodeHandle."]
  #[doc = ""]
  #[doc = " Setting this will cause any callbacks from"]
  #[doc = " advertisements/subscriptions/services/etc. to happen through the"]
  #[doc = " use of the specified queue.  NULL (the default) causes the global"]
  #[doc = " queue (serviced by ros::spin() and ros::spinOnce()) to be used."]
  pub fn node_handle_setCallbackQueue(nh: *mut node_handle, queue: *mut callback_queue);
}
extern "C" {
  #[doc = " \\brief Returns the callback queue associated with this"]
  #[doc = " NodeHandle.  If none has been explicitly set, returns the global"]
  #[doc = " queue."]
  pub fn node_handle_getCallbackQueue(nh: *mut node_handle) -> *mut callback_queue;
}
extern "C" {
  #[doc = " \\brief Returns the namespace associated with this NodeHandle"]
  pub fn node_handle_getNamespace(nh: *mut node_handle) -> *const ::std::os::raw::c_char;
}
extern "C" {
  #[doc = " \\brief Returns the namespace associated with this NodeHandle as"]
  #[doc = " it was passed in (before it was resolved)"]
  pub fn node_handle_getUnresolvedNamespace(nh: *mut node_handle) -> *const ::std::os::raw::c_char;
}
extern "C" {
  #[doc = " \\brief Resolves a name into a fully-qualified name"]
  #[doc = ""]
  #[doc = " Resolves a name into a fully qualified name, eg. \"blah\" =>"]
  #[doc = " \"/namespace/blah\". By default also applies any matching"]
  #[doc = " name-remapping rules (which were usually supplied on the command"]
  #[doc = " line at startup) to the given name, returning the resulting"]
  #[doc = " remapped name."]
  #[doc = ""]
  #[doc = " \\param name Name to remap"]
  #[doc = ""]
  #[doc = " \\param remap Whether to apply name-remapping rules"]
  #[doc = ""]
  #[doc = " \\return Resolved name."]
  #[doc = ""]
  #[doc = " \\throws InvalidNameException If the name begins with a tilde, or is an otherwise invalid graph resource name"]
  pub fn node_handle_resolveName(
    nh: *mut node_handle,
    name: *const ::std::os::raw::c_char,
    remap: bool,
  ) -> *const ::std::os::raw::c_char;
}
extern "C" {
  #[doc = " \\brief Subscribe to a topic, version for bare function"]
  #[doc = ""]
  #[doc = " This method connects to the master to register interest in a given"]
  #[doc = " topic.  The node will automatically be connected with publishers on"]
  #[doc = " this topic.  On each message receipt, fp is invoked and passed a shared pointer"]
  #[doc = " to the message received.  This message should \\b not be changed in place, as it"]
  #[doc = " is shared with any other subscriptions to this topic."]
  #[doc = ""]
  #[doc = " This version of subscribe is a convenience function for using bare functions, and can be used like so:"]
  #[doc = "\\verbatim"]
  #[doc = "void callback(const std_msgs::Empty::ConstPtr& message)"]
  #[doc = "{"]
  #[doc = "}"]
  #[doc = ""]
  #[doc = "ros::Subscriber sub = handle.subscribe(\"my_topic\", 1, callback);"]
  #[doc = "\\endverbatim"]
  #[doc = ""]
  #[doc = " \\param M [template] M here is the callback parameter type (e.g. const boost::shared_ptr<M const>& or const M&), \\b not the message type, and should almost always be deduced"]
  #[doc = " \\param topic Topic to subscribe to"]
  #[doc = " \\param queue_size Number of incoming messages to queue up for"]
  #[doc = " processing (messages in excess of this queue capacity will be"]
  #[doc = " discarded)."]
  #[doc = " \\param fp Function pointer to call when a message has arrived"]
  #[doc = " \\param transport_hints a TransportHints structure which defines various transport-related options"]
  #[doc = " \\return On success, a Subscriber that, when all copies of it go out of scope, will unsubscribe from this topic."]
  #[doc = " On failure, an empty Subscriber which can be checked with:"]
  #[doc = "\\verbatim"]
  #[doc = "void callback(const std_msgs::Empty::ConstPtr& message){...}"]
  #[doc = "ros::NodeHandle nodeHandle;"]
  #[doc = "ros::Subscriber sub = nodeHandle.subscribe(\"my_topic\", 1, callback);"]
  #[doc = "if (sub)  // Enter if subscriber is valid"]
  #[doc = "{"]
  #[doc = "..."]
  #[doc = "}"]
  #[doc = "\\endverbatim"]
  #[doc = "  \\throws InvalidNameException If the topic name begins with a tilde, or is an otherwise invalid graph resource name"]
  #[doc = "  \\throws ConflictingSubscriptionException If this node is already subscribed to the same topic with a different datatype"]
  pub fn node_handle_subscribe(
    nh: *mut node_handle,
    topic: *const ::std::os::raw::c_char,
    type_: *const ::std::os::raw::c_char,
    queue_size: u32,
    cb: callback,
  ) -> *mut subscriber;
}
extern "C" {
  #[doc = " \\brief Advertise a topic, simple version"]
  #[doc = ""]
  #[doc = " This call connects to the master to publicize that the node will be"]
  #[doc = " publishing messages on the given topic.  This method returns a Publisher that allows you to"]
  #[doc = " publish a message on this topic."]
  #[doc = ""]
  #[doc = " This version of advertise is a templated convenience function, and can be used like so"]
  #[doc = ""]
  #[doc = "   ros::Publisher pub = handle.advertise<std_msgs::Empty>(\"my_topic\", 1);"]
  #[doc = ""]
  #[doc = " \\param topic Topic to advertise on"]
  #[doc = ""]
  #[doc = " \\param queue_size Maximum number of outgoing messages to be"]
  #[doc = " queued for delivery to subscribers"]
  #[doc = ""]
  #[doc = " \\param latch (optional) If true, the last message published on"]
  #[doc = " this topic will be saved and sent to new subscribers when they"]
  #[doc = " connect"]
  #[doc = ""]
  #[doc = " \\return On success, a Publisher that, when it goes out of scope,"]
  #[doc = " will automatically release a reference on this advertisement.  On"]
  #[doc = " failure, an empty Publisher."]
  #[doc = ""]
  #[doc = " \\throws InvalidNameException If the topic name begins with a"]
  #[doc = " tilde, or is an otherwise invalid graph resource name, or is an"]
  #[doc = " otherwise invalid graph resource name"]
  pub fn node_handle_advertise(
    nh: *mut node_handle,
    topic: *const ::std::os::raw::c_char,
    queue_size: u32,
    latch: bool,
  ) -> *mut publisher;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct single_threaded_spinner {
  _unused: [u8; 0],
}
extern "C" {
  pub fn single_threaded_spinner_create() -> *mut single_threaded_spinner;
}
extern "C" {
  pub fn single_threaded_spinner_destroy(sp: *mut single_threaded_spinner);
}
extern "C" {
  pub fn single_threaded_spinner_spin(sp: *mut single_threaded_spinner, cq: *mut callback_queue);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct multi_threaded_spinner {
  _unused: [u8; 0],
}
extern "C" {
  #[doc = " \\param thread_count Number of threads to use for calling callbacks.   0 will"]
  #[doc = " automatically use however many hardware threads exist on your system."]
  pub fn multi_threaded_spinner_create(thread_count: u32) -> *mut multi_threaded_spinner;
}
extern "C" {
  pub fn multi_threaded_spinner_destroy(sp: *mut multi_threaded_spinner);
}
extern "C" {
  pub fn multi_threaded_spinner_spin(sp: *mut multi_threaded_spinner, cq: *mut callback_queue);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct async_spinner {
  _unused: [u8; 0],
}
extern "C" {
  pub fn async_spinner_create(thread_count: u32) -> *mut async_spinner;
}
extern "C" {
  pub fn async_spinner_create_with_queue(
    thread_count: u32,
    cq: *mut callback_queue,
  ) -> *mut async_spinner;
}
extern "C" {
  pub fn async_spinner_destroy(sp: *mut async_spinner);
}
extern "C" {
  #[doc = " \\brief Start this spinner spinning asynchronously"]
  pub fn async_spinner_start(sp: *mut async_spinner);
}
extern "C" {
  #[doc = " \\brief Stop this spinner from running"]
  pub fn async_spinner_stop(sp: *mut async_spinner);
}
extern "C" {
  #[doc = " \\brief Returns the current wall clock time in seconds."]
  pub fn time_now_toSec() -> f64;
}
extern "C" {
  #[doc = " \\brief Returns the current wall clock time in nanoseconds."]
  pub fn time_now_toNSec() -> u64;
}
extern "C" {
  pub fn time_init();
}
extern "C" {
  pub fn time_shutdown();
}
extern "C" {
  pub fn time_useSystemTime();
}
extern "C" {
  pub fn time_isSimTime() -> bool;
}
extern "C" {
  pub fn time_isSystemTime() -> bool;
}
extern "C" {
  #[doc = " \\brief Returns whether or not the current time source is valid.  Simulation time is valid if it is non-zero."]
  pub fn time_isValid() -> bool;
}
extern "C" {
  #[doc = " \\brief Wait for time source to become valid"]
  pub fn time_waitForValid();
}
extern "C" {
  #[doc = " \\brief Returns the current wall clock time in seconds."]
  pub fn walltime_now_toSec() -> f64;
}
extern "C" {
  #[doc = " \\brief Returns the current wall clock time in nanoseconds."]
  pub fn walltime_now_toNSec() -> u64;
}
extern "C" {
  pub fn walltime_isSystemTime() -> bool;
}
extern "C" {
  #[doc = " \\brief Returns the name of the current node."]
  pub fn this_node_getName() -> *const ::std::os::raw::c_char;
}
extern "C" {
  #[doc = " \\brief Returns the namespace of the current node."]
  pub fn this_node_getNamespace() -> *const ::std::os::raw::c_char;
}
extern "C" {
  #[doc = " @brief Get the list of topics advertised by this node"]
  #[doc = ""]
  #[doc = " @param[out] topics The advertised topics"]
  pub fn this_node_getAdvertisedTopics() -> *const ::std::os::raw::c_char;
}
extern "C" {
  #[doc = " @brief Get the list of topics subscribed to by this node"]
  #[doc = ""]
  #[doc = " @param[out] The subscribed topics"]
  pub fn this_node_getSubscribedTopics() -> *const ::std::os::raw::c_char;
}
